plugins=(
  git
  kubectl
  kubectx
)

export ZSH_THEME="spaceship"

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'

source $HOME/.oh-my-zsh/oh-my-zsh.sh

## Alias
{{- if and (eq .wsl false) (eq .machine "desktop") }}
sway() {
  # lol
  command sway --unsupported-gpu
}
{{- end }}

docker() {
 if [[ $@ == "ps" ]]; then
  command docker ps -a --format "table {{ "{{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}" }}"
 else
  command docker "$@"
 fi
}

{{- if (eq .wsl true) }}
# WSL2
# SSH Socket
# Removing Linux SSH socket and replacing it by link to wsl2-ssh-pageant socket
export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
ss -a | grep -q $SSH_AUTH_SOCK
if [ $? -ne 0 ]; then
  rm -f $SSH_AUTH_SOCK
  setsid nohup socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:$HOME/.ssh/wsl2-ssh-pageant.exe &>/dev/null &
fi

# GPG
export GPG_AGENT_SOCK="$HOME/.gnupg/S.gpg-agent"
if ! ss -a | grep -q "$GPG_AGENT_SOCK"; then
  rm -rf "$GPG_AGENT_SOCK"
  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
  config_path="C\:/Users/charl/AppData/Local/gnupg"
  if test -x "$wsl2_ssh_pageant_bin"; then
    (setsid nohup socat UNIX-LISTEN:"$GPG_AGENT_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin --gpgConfigBasepath ${config_path} --gpg S.gpg-agent" >/dev/null 2>&1 &)
  else
    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
  fi
  unset wsl2_ssh_pageant_bin
fi
{{- else }}
## GPG Agent
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/yubikey-agent/yubikey-agent.sock"
export GPG_TTY=$(tty)
clear
{{- end }}

# Env vars
{{- if (eq .machine "desktop") }}
export XDG_SESSION_TYPE=wayland
export XDG_CURRENT_DESKTOP=sway
export GBM_BACKEND=nvidia-drm
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export WLR_NO_HARDWARE_CURSORS=1
export WLR_DRM_NO_ATOMIC=1
{{- end }}
{{- if (eq .machine "x1") }}
export XDG_CURRENT_DESKTOP=sway
{{- end }}
{{- if (eq .wsl false) }}
export GDK_BACKEND=wayland
export MOZ_ENABLE_WAYLAND=1
{{- end }}
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
export GOPATH=$HOME/golang
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$HOME/.cargo/bin
export PATH=$PATH:$HOME/.dotnet/tools
export CARGO_NET_GIT_FETCH_WITH_CLI=true
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
export AWS_PROFILE=default
export AWS_ACCESS_KEY_ID=$(aws configure get default.aws_access_key_id)
export AWS_SECRET_ACCESS_KEY=$(aws configure get default.aws_secret_access_key)
export AWS_SESSION_TOKEN=$(aws configure get default.aws_session_token)

# unset, because reasons
unset GOROOT

## Set default editor
export EDITOR=nano

# Theme config
SPACESHIP_PROMPT_SEPARATE_LINE=false
SPACESHIP_PROMPT_PREFIXES_SHOW=false
SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_GCLOUD_SHOW=false
SPACESHIP_DOCKER_SHOW=false

. <(flux completion zsh)
. <(timoni completion bash)

{{- if not (eq .machine "x1") }}
# nvm
source /usr/share/nvm/init-nvm.sh
{{- end }}

echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.profile
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.profile
echo 'eval "$(pyenv init --path)"' >> ~/.profile
echo 'if [ -n "$PS1" -a -n "$BASH_VERSION" ]; then source ~/.bashrc; fi' >> ~/.profile

echo 'eval "$(pyenv init -)"' >> ~/.bashrc
autoload -Uz compinit; compinit

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin

