plugins=(
  git
  kubectl
  kubectx
)

export ZSH_THEME="spaceship"

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'

source $HOME/.oh-my-zsh/oh-my-zsh.sh

## Alias
{{- if and (eq .wsl false) (eq .machine "desktop") }}
sway() {
  command sway --unsupported-gpu
}
{{- end }}

docker() {
 if [[ $@ == "ps" ]]; then
  command docker ps -a --format "table {{ "{{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}" }}"
 else
  command docker "$@"
 fi
}

# Env vars
{{- if (eq .machine "desktop") }}
export GBM_BACKEND=nvidia-drm
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export WLR_NO_HARDWARE_CURSORS=1
export WLR_DRM_NO_ATOMIC=true
export WLR_RENDERER=vulkan
{{- end }}
{{- if (eq .wsl false) }}
export _JAVA_AWT_WM_NONREPARENTING=1
{{- end }}
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
export GOPATH=$HOME/golang
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$HOME/.cargo/bin
export PATH=$PATH:$HOME/.dotnet/tools
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:/usr/local/go/bin
export CARGO_NET_GIT_FETCH_WITH_CLI=true
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"

alias aws-profile='export AWS_PROFILE=$(sed -n "s/\[profile \(.*\)\]/\1/gp" ~/.aws/config | fzf) &&
  eval "$(aws configure export-credentials --profile $AWS_PROFILE --format env)" &&
  export AWS_REGION=$(aws configure --profile $AWS_PROFILE get region)'

# GPG ssh
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent
gpg-connect-agent updatestartuptty /bye > /dev/null

# unset, because reasons
unset GOROOT

## Set default editor
export EDITOR=nvim

# Theme config
SPACESHIP_PROMPT_PREFIXES_SHOW=false
SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_PROMPT_SEPARATE_LINE=false
SPACESHIP_RPROMPT_ADD_NEWLINE=true
SPACESHIP_GCLOUD_SHOW=false
SPACESHIP_DOCKER_SHOW=false

. <(flux completion zsh)

{{- if not (eq .machine "x1") }}
# nvm
source /usr/share/nvm/init-nvm.sh
{{- end }}

echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.profile
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.profile
echo 'eval "$(pyenv init --path)"' >> ~/.profile
echo 'if [ -n "$PS1" -a -n "$BASH_VERSION" ]; then source ~/.bashrc; fi' >> ~/.profile

echo 'eval "$(pyenv init -)"' >> ~/.bashrc
autoload -Uz compinit; compinit

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin

# pnpm
export PNPM_HOME="/home/charlie/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
